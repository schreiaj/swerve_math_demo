{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","selectedWheels","setWheels","useStopwatch","start","time","useEffect","translationLeftStick","vec","translate","get","leftStick","useMovablePoint","color","transform","constrain","x","y","clamp","translationRightStick","rightStick","theta","wheels_4","trackWidth","trackLength","wheelOptions","Math","sqrt","wheels","max_v","Infinity","wheel_v","map","w","w_x","w_y","v","pow","angle","atan2","i","max","xAxisExtent","yAxisExtent","Fragment","tail","tip","element","onChange","event","value","target","Object","keys","key","selected","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAyGeA,MAnGf,WAEE,MAAkCC,mBAAS,YAA3C,mBAAKC,EAAL,KAAqBC,EAArB,KACA,EAA2BC,yBAAVC,GAAjB,EAAQC,KAAR,EAAiBD,OAGjBE,qBAAU,kBAAMF,MAAS,CAACA,IAE1B,IAEMG,EAAuBC,kBAE1BC,WAAW,GAAI,GACfC,MAEGC,EAAYC,0BAAgB,CAAC,EAAG,GAAI,CAAEC,MAAO,OAAQC,UAAWP,EAAsBQ,UAAW,mCAAEC,EAAF,KAAKC,EAAL,WAAY,CAACC,gBAAMF,GAAI,EAAG,GAAIE,gBAAMD,GAAI,EAAG,OAE5IE,EAAwBX,kBAE3BC,UAAU,GAAI,GACdC,MAEGU,EAAaR,0BAAgB,CAAC,EAAG,GAAI,CAAEC,MAAO,MAAOC,UAAWK,EAAuBJ,UAAW,mCAAEC,EAAF,KAAKC,EAAL,WAAY,CAACC,gBAAMF,GAAI,EAAG,GAAIE,gBAAMD,EAAG,EAAG,OAC5ID,EAAIL,EAAUK,EACdC,EAAIN,EAAUM,EAIdI,EAAQD,EAAWJ,EAEnBM,EAAW,CACf,CAACC,EAAgBC,GACjB,EAAC,EAAiBA,GAClB,EAAC,GAAiB,GAClB,CAACD,GAAgB,IAWfE,EAA0C,CAC5C,WATe,CACf,CAACF,EAAgBC,GACjB,EAAC,EAAiBA,GAClB,CAAC,GAAKE,KAAKC,KA/BO,KAsClB,WAAYL,GAGVM,EAASH,EAAaxB,GAEtB4B,GAASC,IAUPC,EATaH,EAAOI,KAAI,SAAAC,GAC5B,IAAIC,EAAMlB,EAAIK,EAAQY,EAAE,GA9CP,EA+CbE,EAAMlB,EAAII,EAAQY,EAAE,GA9CN,EA+CdG,EAAIV,KAAKC,KAAKD,KAAKW,IAAIH,EAAK,GAAKR,KAAKW,IAAIF,EAAK,IAC/CG,GAASZ,KAAKa,MAAML,EAAKC,GAE7B,OADAN,EAAQO,EAAIP,EAAQO,EAAIP,EACjB,CAAEO,IAAGE,YAGeN,KAAI,SAACI,EAAGI,GACnC,OAAOhC,MAAQoB,EAAOY,GAAIhC,SAAW,CAAC,EAAG4B,EAAEA,EAAIV,KAAKe,IAAIZ,EAAO,IAAKO,EAAEE,WAGxE,OACE,gCACE,eAAC,OAAD,CAAMI,YAAa,EAAE,EAAG,GAAIC,YAAa,EAAE,EAAG,GAA9C,UACE,cAAC,uBAAD,IAECf,EAAOI,KAAI,SAACI,EAAGI,GAEd,OAAO,cAAC,IAAMI,SAAP,UACL,cAAC,SAAD,CAAQC,KAAMT,EAAGU,IAAKf,EAAQS,UAKlC,cAAC,QAAD,CAAOxB,GAAI,EAAGC,GAAI,EAAGJ,MAAM,UAC3B,cAAC,QAAD,CAAOG,EAAG,EAAGC,GAAI,EAAGJ,MAAM,UAC1B,cAAC,QAAD,CAAOG,EAAGA,EAAI,EAAGC,EAAGA,EAAI,EAAGJ,MAAM,SAChCF,EAAUoC,QACV3B,EAAW2B,WAEd,+CACc,wBAAQC,SAAU,SAACC,GAC7B,IAAMC,EAAgBD,EAAME,OAAOD,OAAS,WAC5ChD,EAAUgD,IACTA,MAAOjD,EAHE,SAIXmD,OAAOC,KAAK5B,GAAcO,KAAI,SAAAsB,GAC3B,OAAO,wBAAQC,SAAUD,IAAMrD,EAAgBiD,MAAOI,EAA/C,SAAqDA,gBCnFzDE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d9719c57.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Mafs, CartesianCoordinates, useMovablePoint, Vector, Circle, Point, useStopwatch } from \"mafs\"\nimport * as vec from \"vec-la\"\nimport { clamp } from \"lodash\"\n\nfunction App() {\n\n  let [selectedWheels, setWheels] = useState('4 Wheels');\n  const { time: t, start } = useStopwatch()\n  const timeScale = .25\n\n  useEffect(() => start(), [start])\n\n  const trackWidth = 2\n  const trackLength = 2\n  const translationLeftStick = vec\n    .matrixBuilder()\n    .translate(-2, -2)\n    .get()\n\n  const leftStick = useMovablePoint([0, 0], { color: \"blue\", transform: translationLeftStick, constrain: ([x, y]) => [clamp(x, -1, 1), clamp(y, -1, 1)] })\n\n  const translationRightStick = vec\n    .matrixBuilder()\n    .translate(2, -2)\n    .get()\n\n  const rightStick = useMovablePoint([0, 0], { color: \"red\", transform: translationRightStick, constrain: ([x, y]) => [clamp(x, -1, 1), clamp(y, 0, 0)] })\n  const x = leftStick.x\n  const y = leftStick.y\n  // const x = Math.cos(t*timeScale * 2 * Math.PI)\n  // const y = Math.sin(t*timeScale * 2 * Math.PI)\n  // const theta = Math.PI / 2 - Math.atan2(rightStick.x, rightStick.y)\n  const theta = rightStick.x\n\n  const wheels_4 = [\n    [trackWidth / 2, trackLength / 2],\n    [-trackWidth / 2, trackLength / 2],\n    [-trackWidth / 2, -trackLength / 2],\n    [trackWidth / 2, -trackLength / 2]\n  ]\n\n  const wheels_3 = [\n    [trackWidth / 2, trackLength / 2],\n    [-trackWidth / 2, trackLength / 2],\n    [0, - Math.sqrt(trackLength)]\n  ]\n\n  \n\n  let wheelOptions:Record<string, number[][]> = {\n    \"3 Wheels\": wheels_3,\n    '4 Wheels': wheels_4\n  };\n\n  let wheels = wheelOptions[selectedWheels]\n\n  let max_v = -Infinity\n  let wheel_states = wheels.map(w => {\n    let w_x = x + theta * w[1] / trackWidth\n    let w_y = y - theta * w[0] / trackLength\n    let v = Math.sqrt(Math.pow(w_x, 2) + Math.pow(w_y, 2))\n    let angle = -Math.atan2(w_x, w_y)\n    max_v = v > max_v ? v : max_v\n    return { v, angle }\n  });\n\n  const wheel_v = wheel_states.map((v, i) => {\n    return vec.add(wheels[i], vec.rotate([0, v.v / Math.max(max_v, 1)], v.angle))\n  })\n\n  return (\n    <div>\n      <Mafs xAxisExtent={[-5, 5]} yAxisExtent={[-5, 5]}>\n        <CartesianCoordinates />\n\n        {wheels.map((v, i) => {\n\n          return <React.Fragment>\n            <Vector tail={v} tip={wheel_v[i]} />\n\n          </React.Fragment>\n        })}\n\n        <Point x={-2} y={-2} color=\"white\" />\n        <Point x={2} y={-2} color=\"white\" />\n        <Point x={x - 2} y={y - 2} color=\"blue\" />\n        {leftStick.element}\n        {rightStick.element}\n      </Mafs>\n      <div>\n        Num Wheels: <select onChange={(event) => { \n          const value: string = event.target.value || \"wheels_4\";\n          setWheels(value);\n        }} value={selectedWheels}>\n        {Object.keys(wheelOptions).map(key => {\n            return <option selected={key===selectedWheels} value={key}>{key}</option>\n          })}\n        </select>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}